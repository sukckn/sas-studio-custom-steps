{"creationTimeStamp":"2025-03-17T11:17:23.873Z","modifiedTimeStamp":"2025-03-25T15:52:53.873Z","createdBy":"Clemens.Knobloch@sas.com","modifiedBy":"Clemens.Knobloch@sas.com","name":"ID - Generate PY Custom Function.step","displayName":"ID - Generate PY Custom Function.step","localDisplayName":"ID - Generate PY Custom Function.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f/copy","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","uri":"/dataFlows/steps/4f4c2909-d860-4c10-af04-d21829158e0f","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Generate CF\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Generate Intelligent Decisioning Custom Function to execute Python code.\\nPoint to a Python file to be executed through a custom function.\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_pythonScript\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select Python Script:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"Select file on SAS Server\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_generatecf_page\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Intelligent Decisioning\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Set the custom function name and category.\\n* The default function name is the Python function name.\\n* The default category name is 'Category1'.\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_createCF\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Create custom function in Intelligent Decisioning\",\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"indent\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_customFunctionName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Custom function name:\",\n\t\t\t\t\t\t\t\"placeholder\": \"<Custom function name>\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"indent\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_categoryName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Category name:\",\n\t\t\t\t\t\t\t\"placeholder\": \"Category1\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"indent\": 1\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Custom function code file\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"You can set a folder on SAS Server to get the generated DS2 code for the custom function.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_cfCodeOut\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Set folder for custom function code file:\",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"Select folder on SAS Server\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"_about_page\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text5\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Generate PY Custom Function\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_about_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"This step creates a custom function in Intelligent Decisioning to execute a Python program as part of the custom function.\\nPython code executed in a custom function needs to be executed using DS2 PyMAS. The step will take a Python file as input parameter, generates the necessary DS2 code to execute the Python code and creates the appropriate custom function in Intelligent Decisioning.\\n\",\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"indent\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Change Log\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"indent\": 1,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Version 1.0 (25MAR2025)\\n* Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"_pythonScript\": \"\",\n\t\t\"_createCF\": true,\n\t\t\"_customFunctionName\": \"\",\n\t\t\"_categoryName\": \"Category1\",\n\t\t\"_cfCodeOut\": \"\"\n\t}\n}","templates":{"SAS":"/************************************************************************************\n* Custom Step: ID Generate PY Custom Function\n* -----------------------------------------------------------------------------------\n* The step will generate the DS2 code for a custom function in \n* Intelligent Decisioning that is executing Python code.\n* -----------------------------------------------------------------------------------\n* Note: Macros starting with an underscore contain UI variable values\n**************************************************************************************/\n%let version= 1.0;\n%let DS2Parameters=;\n\n/*************************************************************************************/\n/* Macro getDateTime()                                                               */ \n/* --------------------------------------------------------------------------------- */\n/* Get current date and time and put it into macro dt.                               */\n/* we use it as a timestamp in the generated custom function code                    */\n/*************************************************************************************/\n%macro getDateTime();\n    %global dt;\n    filename py temp;\n    data _null_;\n        file py;\n        put 'from datetime import datetime';\n        put 'dt= datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")';\n        put 'SAS.symput(\"dt_\", dt)';\n    run;\n    proc python infile=py;\n    run;\n    %let dt= &dt_;\n%mend getDateTime;\n\n/*************************************************************************************/\n/* Macro checkPyFile()                                                               */ \n/* --------------------------------------------------------------------------------- */\n/* Check if the folders are pointing to sasserver                                    */\n/*************************************************************************************/\n%macro checkFolder();\n    %global _pythonScript;\n\n    %if &_pythonScript ~= %then %do;\n        %let folderserver= %substr(&_pythonScript, 1, 9);\n        %let _pythonScript= %substr(&_pythonScript, 11);\n        data _null_;\n            file print; \n            folderserver= \"&folderserver\";\n            if folderserver ~= \"sasserver\" then do;\n                put \"ERROR: Wrong input folder!\";\n                put \"The Python file needs to be on sasserver!\";\n                error \"ERROR: Wrong input folder! The Python file needs to be on sasserver!\";\n                abort;\n            end;\n        run;\n    %end;\n    %if &_cfCodeOut ~= %then %do;\n        %let folderserver= %substr(&_cfCodeOut, 1, 9);\n        %let _cfCodeOut= %substr(&_cfCodeOut, 11);\n        data _null_;\n            file print; \n            folderserver= \"&folderserver\";\n            if folderserver ~= \"sasserver\" then do;\n                put \"ERROR: Wrong output folder!\";\n                put \"Output folder needs to be on sasserver!\";\n                error \"ERROR: Wrong output folder! Output folder needs to be on sasserver!\";\n                abort;\n            end;\n        run;\n    %end;\n    %else %do;\n        /* if the output folder is not set we default it to /tmp */\n        %let _cfCodeOut=/tmp; \n    %end;\n%mend checkFolder;\n\n/*************************************************************************************/\n/* Macro prepTemplate()                                                              */ \n/* --------------------------------------------------------------------------------- */\n/* Create the template for the custom function and put it into a dataset.            */\n/*************************************************************************************/\n%macro prepTemplate();\n    data WORK._GPCF_CFTEMPLATE;\n        length ln 4;\n        length line $1000.;\n        \n        ln= 100; line= 'method @@customFunctionName@@(@@DS2Parameters@@); '; output;\n        ln= ln+1; line= '/*****************************************************************************************************************************************'; output;\n        ln= ln+1; line= ' * Generated by custom step: Generate PY Custom Function - Version: @@version@@ - Date: @@datetime@@                                      '; output;\n        ln= ln+1; line= ' * ---------------------------------------------------------------------------------------------------------------------------------------'; output;\n        ln= ln+1; line= ' * By default all function parameters are set to varchar. Change the parameter type if neccessary and set the varchar size as appropriate.'; output;\n        ln= ln+1; line= ' * If you change the parameter type you also need to adjust the ''set parameter'' and ''get parameter'' functions in the code. See          '; output;\n        ln= ln+1; line= ' * appropriate scetions at the end of the function code.                                                                                  '; output;\n        ln= ln+1; line= ' * ---------------------------------------------------------------------------------------------------------------------------------------'; output;\n        ln= ln+1; line= ' * To run the custom function you need to add a Custom Context file to the Decison Flow.                                                  '; output;\n        ln= ln+1; line= ' * Declare the variable logr in the Custom Context file. Variable logr must only to be declared once in the Custom Context file!          '; output;\n        ln= ln+1; line= ' *    dcl package logger logr(''App.tk.SID.Python'');                                                                                     '; output;\n        ln= ln+1; line= ' * Declare the pymas variable @@py@@ in the Custom Context file.                                                                         '; output;\n        ln= ln+1; line= ' *    dcl package pymas @@py@@;                                                                                                           '; output;\n        ln= ln+1; line= '******************************************************************************************************************************************/'; output;\n        ln= ln+1; line= '    dcl nvarchar(10485760) pypgm;'; output;\n        ln= ln+1; line= '    dcl varchar(50) pyScriptName;'; output;\n        ln= ln+1; line= '    dcl double revision rc;'; output;\n        ln= ln+1; line= ''; output;\n        ln= ln+1; line= '    /* Name of the Python source code file */'; output;\n        ln= ln+1; line= '    pyScriptName= ''@@pyScriptName@@_01'';'; output;\n        ln= ln+1; line= ''; output;\n        ln= ln+1; line= '    /* If Python object is not yet initilized allocate a new object */'; output;\n        ln= ln+1; line= '    if null(application.@@py@@) then do;'; output;\n        ln= ln+1; line= '        application.@@py@@= _new_ pymas();'; output;\n        ln= ln+1; line= '        /* If we execute in MAS or SCR we can use the Python code if it is there already */'; output;\n        ln= ln+1; line= '        if inmas() then do;'; output;\n        ln= ln+1; line= '            rc= application.@@py@@.useModule(pyScriptName, 1);'; output;\n        ln= ln+1; line= '        end;'; output;\n        ln= ln+1; line= '        else do;'; output;\n        ln= ln+1; line= '            rc= 1;'; output;\n        ln= ln+1; line= '        end;'; output;\n        ln= ln+1; line= '        /* If Python code does not yet exist we are going to write it now */'; output;\n        ln= ln+1; line= '        if rc then do;'; output;\n        ln= 300;  line= ' '; output;\n        ln= ln+1; line= '            /* Create the Python script and make it available */'; output;\n        ln= ln+1; line= '            pypgm= application.@@py@@.getSource();'; output;\n        ln= ln+1; line= '            revision= application.@@py@@.publish(pypgm, pyScriptName);'; output;\n        ln= ln+1; line= '            if revision < 1 then do;'; output;\n        ln= ln+1; line= '                application.logr.log(''e'', ''publish revision=$s'', revision);'; output;\n        ln= ln+1; line= '                return;'; output;\n        ln= ln+1; line= '            end;'; output;\n        ln= ln+1; line= '        end;'; output;\n        ln= ln+1; line= '        else do;'; output;\n        ln= ln+1; line= '            application.logr.log(''d'', ''useModule rc=$s'', rc);'; output;\n        ln= ln+1; line= '        end;'; output;\n        ln= ln+1; line= '        /* Set the entry function into the Python script */'; output;\n        ln= ln+1; line= '        rc= application.@@py@@.useMethod(''@@pyFunction@@'');'; output;\n        ln= ln+1; line= '        if rc then do;'; output;\n        ln= ln+1; line= '            application.logr.log(''e'', ''useMethod rc=$s'', rc);'; output;\n        ln= ln+1; line= '            return;'; output;\n        ln= ln+1; line= '        end;'; output;\n        ln= ln+1; line= '    end;'; output;\n        ln= ln+1; line= ''; output;\n        ln= ln+1; line= '/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/'; output;\n        ln= ln+1; line= '/* Set Parameter:                                                                        */'; output;\n        ln= ln+1; line= '/* If you have changed the parameter type in the custom function head you need to        */'; output;\n        ln= ln+1; line= '/* change the @@py@@.setString() function to match the correct parameter type.    */'; output;\n        ln= ln+1; line= '/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/'; output;\n        ln= ln+1; line= '    /* Set the input parameter values for the Python entry function  */'; output;\n        ln= ln+1; line= '    @@inputParameters@@'; output;\n        ln= ln+1; line= '    /* Run the Python script */'; output;\n        ln= ln+1; line= '    rc= application.@@py@@.execute();'; output;\n        ln= ln+1; line= '    if rc then do;'; output;\n        ln= ln+1; line= '        application.logr.log(''d'', ''execute rc=$s'', rc );'; output;\n        ln= ln+1; line= '        return;'; output;\n        ln= ln+1; line= '    end;'; output;\n        ln= ln+1; line= ''; output;\n        ln= ln+1; line= '/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/'; output;\n        ln= ln+1; line= '/* Get Parameter:                                                                        */'; output;\n        ln= ln+1; line= '/* If you have changed the parameter type in the custom function head you need to        */'; output;\n        ln= ln+1; line= '/* change the @@py@@.getString() function to match the correct parameter type.    */'; output;\n        ln= ln+1; line= '/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/'; output;\n        ln= ln+1; line= '    /* Get the return values from the Python script */'; output;\n        ln= ln+1; line= '    @@outputParameters@@'; output;\n        ln= ln+1; line= 'end;'; output;\n        ln= ln+1; line= ''; output;\n    run;\n%mend prepTemplate;\n\n/*************************************************************************************/\n/* Macro wrapPyCode()                                                              */ \n/* --------------------------------------------------------------------------------- */\n/* Read Python script and wrap each line in the Python file into                     */\n/* a pymas appendSrcLine() statement                                                 */\n/*************************************************************************************/\n%macro wrapPyCode();\n    data work._GPCF_WRAPEDPYCODE;\n        infile pyscript lrecl=1000  firstobs=1 pad;\n        length ln 4;\n        length line $1000;\n    \n        retain ln;\n        if _n_ = 1 then\n            ln= 200;\n        else\n            ln= ln+1;\n    \n        /* read file */\n        input line $char1000.;\n        /* escape single quote */\n        line= tranwrd(line, '''', '''''');\n        /* make tab into space */\n        line= tranwrd(line, '09'x, '    ');\n        /* wrap Python code */\n        line= '            rc= application.@@py@@.appendSrcLine(''' || trim(line) || ''');';\n    run;\n%mend wrapPyCode;\n\n/*************************************************************************************/\n/* Macro mergeTemplate()                                                             */ \n/* --------------------------------------------------------------------------------- */\n/* Merge the CF template with the wraped Python code                                 */\n/*************************************************************************************/\n%macro mergeTemplate();\n    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n    /* Merge the template with the wraped Python code                                    */\n    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n    data WORK._GPCF_CFTEMPLATE;\n        set WORK._GPCF_CFTEMPLATE WORK._GPCF_WRAPEDPYCODE;\n    run;\n    \n    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n    /* Sort the template data set to get the Python code in the right place.             */\n    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n    proc sort data=WORK._GPCF_CFTEMPLATE;\n        by ln;\n    quit;\n%mend mergeTemplate;\n\n/*************************************************************************************/\n/* Macro getCfParameters()                                                           */ \n/* --------------------------------------------------------------------------------- */\n/* Read Python script. Look for the input and out parameters of the Python entry     */\n/* function. Put input output parameters to SAS macros inParameters, outParameters   */\n/* respectively.                                                                     */\n/* Also identify the Python entry function name and put in macros                    */\n/* customFunctionName and pythonFunctionName.                                        */\n/*************************************************************************************/\n%macro getCfParameters();\n    data _null_;\n        infile pyscript lrecl=32767  firstobs=1 pad;\n        length line $32767 ;\n        length inParameters outParameters $1000.;\n        length pyEntryFunction pyOutParameters $1000.;\n    \n        /* read file */\n        input line $char32767.;\n    \n        retain pyEntryFunction captureNextLineDef captureNextLineOut checkIfEntryFunction outParameters;\n\n        /* check if the function we found is the Python entry point function.  in this case the next line contains the Output Doc string */\n        if checkIfEntryFunction = 1 then do;\n            found= prxmatch(\"/def /\", line);\n            /* look for output parameters. They are in a doc line with key word 'Output:' */\n            found= prxmatch(\"/'Output *:/i\", line);\n            if found > 0 then do;\n                /* get input parameters */\n                idxStart= find(pyEntryFunction, '(');\n                idxEnd= find(pyEntryFunction, ')');\n                /* remove all space in parameter list. Leaving a comma separated list */\n                inParameters= compress(substrn(pyEntryFunction, idxStart+1, idxEnd-idxStart-1));\n                /* replace the comma in list with space so we can read it with %scan() later */\n                inParameters= tranwrd(inParameters, ',', ' ');\n                call symput('inParameters', inParameters);\n    \n                /* get function name */\n                pyFuncName= substrn(strip(pyEntryFunction), 5, idxStart-5);\n                call symput('pythonFunctionName', strip(pyFuncName));\n                /* we either get the ds2 custom function name from the Python script or from the UI if it is set in the UI */\n                %if &_customFunctionName = %then %do;\n                    call symput('customFunctionName', strip(pyFuncName));\n                %end;\n                %else %do;\n                    call symput('customFunctionName', strip(\"&_customFunctionName\"));\n                %end;\n    \n                /* we found the entry function and don't need to come here again */\n                checkIfEntryFunction= 0;\n            end;\n            pyEntryFunction= '';\n        end;\n   \n        /* check if the current line contains a function */\n        found= prxmatch(\"/def /\", line);\n        /* the function head may go over several lines. We capture all lines until we find a colon */\n        if found > 0 or captureNextLineDef = 1 then do;\n            pyEntryFunction= cats(pyEntryFunction, strip(line));\n            idxColon= find(line, ':');\n            captureNextLineDef= 0;\n            checkIfEntryFunction= 0;\n            /* if we see the colon we check if this is the entry function */\n            if idxColon = 0 then\n                captureNextLineDef= 1;\n            else\n                checkIfEntryFunction= 1;\n        end;   \n\n        /* check if the current line contains the return parameter list */\n        found= prxmatch(\"/'Output *:/i\", line);\n        /* the output list may go over several lines. We capture all lines until we find a single quote at the end */\n        if found > 0 or captureNextLineOut = 1 then do;\n            outParameters= cats(outParameters, strip(line));\n            idxQuote= find(strip(line), '''', 8);\n            captureNextLineOut= 0;\n            checkIfEntryFunction= 0;\n            /* if we see the colon we check if this is the entry function */\n            if idxQuote = 0 then\n                captureNextLineOut= 1;\n            else do;\n                idxStart= find(outParameters, ':');\n                idxEnd= find(outParameters, '''', idxStart+1);\n                /* remove all space in parameter list. Leaving a comma separated list */\n                outParameters= compress(substrn(outParameters, idxStart+1, idxEnd-idxStart-1));\n                /* replace the comma in list with space so we can read it with %scan() later */\n                outParameters= tranwrd(outParameters, ',', ' ');        \n                call symput('outParameters', outParameters);\n            end;\n        end;   \n    run;\n%mend getCfParameters;\n\n/*************************************************************************************/\n/* Macro setDS2Parameters()                                                          */ \n/* --------------------------------------------------------------------------------- */\n/* From the input and output parameters set SAS macro 'DS2Parameters'                */\n/* We use this macro when we write the custom function method head.                  */\n/* As we don't from the parameter/variable data type we set the type to varchar      */\n/* by default. This needs to get changed manually if neccessary                      */\n/*************************************************************************************/\n%macro setDS2Parameters();\n    %global DS2Parameters;\n    /* count how many input parameters */\n    %if %length(&inParameters) > 0 %then\n        %let cnt= %sysfunc(countw(&inParameters));\n    %else\n        %let cnt= 0;\n\n    /* loop through input parameters */\n    %let i=1;\n    %do %while (&i < %eval(&cnt+1));\n        /* write parameter with data type to list */\n        %let para= %scan(&inParameters, &i);\n        %if &i = 1 %then\n            %let DS2Parameters= varchar(30) &para;\n        %else\n            %let DS2Parameters= &DS2Parameters, varchar(30) &para;\n        %let i= %eval(&i+1);\n    %end;\n\n    /* count how many output parameters */\n    %if %length(&outParameters) > 0 %then\n        %let cnt= %sysfunc(countw(&outParameters));\n    %else\n        %let cnt= 0;\n\n    /* loop through output parameters */\n    %let i=1;\n    %do %while (&i < %eval(&cnt+1));\n        /* write parameter as in_out with data type to list */\n        %let para= %scan(&outParameters, &i);\n        %if %length(&inParameters) = 0 and &i = 1 %then\n            %let DS2Parameters= in_out varchar &para;\n        %else\n            %let DS2Parameters= &DS2Parameters, in_out varchar &para;\n        %let i= %eval(&i+1);\n    %end;\n%mend setDS2Parameters;\n\n/*************************************************************************************/\n/* Macro setInPyParameters()                                                         */ \n/* --------------------------------------------------------------------------------- */\n/* Generate the cunstom function code to set the input parameters for the Python code*/\n/* The input parameters are in macro inParameters                                    */\n/*************************************************************************************/\n%macro setInPyParameters();\n    %if %length(&inParameters) > 0 %then\n        %let cnt= %sysfunc(countw(&inParameters));\n    %else\n        %let cnt= 0;\n    %let i=1;\n\n    %do %while (&i < %eval(&cnt+1));\n        %let para= %scan(&inParameters, &i);\n        %let i= %eval(&i+1);\n        /* for each parameter generate a code lines blow */\n        put \"    rc= application.&customFunctionName._py.setString('&para', &para);\";\n        put \"    if rc then do;\";\n        put \"        application.logr.log('e', 'set &para rc=$s', rc );\";\n        put \"        return;\";\n        put \"    end;\";\n    %end;\n%mend setInPyParameters;\n\n/*************************************************************************************/\n/* Macro setOutPyParameters()                                                        */ \n/* --------------------------------------------------------------------------------- */\n/* Generate the cunstom function code to read the output parameters from             */\n/* the Python code.                                                                  */\n/* The output parameters are in macro outParameters                                  */\n/*************************************************************************************/\n%macro setOutPyParameters();\n    %if %length(&outParameters) > 0 %then\n        %let cnt= %sysfunc(countw(&outParameters));\n    %else\n        %let cnt= 0;\n    %let i=1;\n    %do %while (&i < %eval(&cnt+1));\n        %let para= %scan(&outParameters, &i);\n        %let i= %eval(&i+1);\n        /* for each parameter generate a code line */\n        put \"    &para= application.&customFunctionName._py.getString('&para');\";\n    %end;\n%mend setOutPyParameters;\n\n/***************************************************************************/\n/* Macro getCategoryId()                                                   */\n/* ----------------------------------------------------------------------- */\n/* The macro reads the categoryId from the REST call response and puts it  */\n/* into the macro variable categoryId. If the category does not exist the  */\n/* macro variable is set to empty.                                         */\n/***************************************************************************/\n%macro getCategoryId();\n    %global categoryId;\n\n    libname HTTPOUT JSON fileref=HTTPOUT;\n    proc sql noprint;\n    select value\n      into :count\n      from httpout.alldata\n     where P= 1\n       and P1 = 'count';\n    quit;\n\n    %if &count = 1 %then %do;\n        proc sql noprint;\n        select id \n          into :categoryId\n          from httpout.items\n        ;\n        quit;\n    %end;\n    %else %do;\n        %let categoryId= .;\n    %end;\n    libname HTTPOUT clear;\n\n    /* remove trailing blanks from macro */\n    data _null_;\n        call symput('categoryId',trim(\"&categoryId\"));\n    run;\n\n    %put ==> existing categoryId=&categoryId.;\n\n%mend getCategoryId;\n\n/***************************************************************************/\n/* Macro createCategory()                                                  */\n/* ----------------------------------------------------------------------- */\n/* The macro creates a category and puts the categoryId into the macro     */\n/* variable categoryId.                                                    */\n/***************************************************************************/\n%macro createCategory();\n    %global _categoryName;\n\n    /* Set URL to to create category */\n    data _null_;\n        url= cat('\"', \"&server\", \"/businessRules/functionCategories\", '\"');\n        call symputx('url', url);\n        put url=;\n    run;\n\n    /* create the payload to create the category */\n    filename HTTIN TEMP;\n    data _null_;\n        file HTTIN;\n        name= cat('\"name\": \"', \"&_categoryName\", '\",');\n        put '{';\n        put name;\n        put '  \"description\": \"\",';\n        put '  \"hidden\": false';\n        put '}';\n    run;\n\n    /* create the category */\n    filename HTTPOUT TEMP;\n    proc http\n        method= \"POST\"      \n        url= &url\n        in= HTTIN \n        out= HTTPOUT\n        oauth_bearer= sas_services;\n        headers \n            'Content-Type'='application/json';\n    quit;\n\n    /* read the categoryId */\n    libname httpout JSON fileref=HTTPOUT;\n    proc sql noprint;\n    select trim(value) \n      into :categoryId\n      from httpout.alldata\n     where P= 1 \n       and P1 = 'id';\n    quit;\n\n    /* remove trailing blanks from macro */\n    data _null_;\n    call symput('categoryId',trim(\"&categoryId\"));\n    run;\n    %put ==> created categoryId= &categoryId;\n\n%mend createCategory;\n\n/***************************************************************************/\n/* Macro writeCFJson()                                                     */\n/* ----------------------------------------------------------------------- */\n/* The macro writes the json file we need for thr REST API to create the CF*/\n/***************************************************************************/\n%macro writeCFJson();\n    filename py temp;\n    data _null_;\n        file py;\n        put \"import json\";\n        put \"cf={}\";\n        put \"cf['name']= SAS.symget('customFunctionName')\";\n        put \"cf['description']= ''\";\n        put \"cf['category']= SAS.symget('_categoryName')\";\n        put \"cf['hidden']= False\";\n        put \"cf['nameQuoted']= False\";\n        put \"cf['signature']= []\";\n        put \"parameter= {}\";\n        put \"for para in SAS.symget('inParameters').split():\";\n        put \"    parameter['name']= para\";\n        put \"    parameter['dataType']= 'string'\";\n        put \"    parameter['inOut']= False\";\n        put \"    parameter['length']= 30\";\n        put \"    parameter['nameQuoted']= False\";\n        put \"    cf['signature'].append(parameter.copy())\";\n        put \"for para in SAS.symget('outParameters').split():\";\n        put \"    parameter['name']= para\";\n        put \"    parameter['dataType']= 'string'\";\n        put \"    parameter['inOut']= True\";\n        put \"    parameter['length']= None\";\n        put \"    parameter['direction']= 'output'\";\n        put \"    parameter['nameQuoted']= False\";\n        put \"    cf['signature'].append(parameter.copy())\";\n        put \" \";\n        put \"print(SAS.symget('_cfCodeOut') +'/' +SAS.symget('customFunctionName') +'.ds2')\";\n        put \"with open(SAS.symget('_cfCodeOut') +'/' +SAS.symget('customFunctionName') +'.ds2') as f: ds2= f.read()\";\n        put \"cf['code']=ds2\";\n        put \"with open('/tmp/' +SAS.symget('customFunctionName') +'.json', 'w') as f: f.write(json.dumps(cf))\";\n    run;\n    PROC Python infile= py;\n    run; quit;\n%mend writeCFJson;\n\n/***************************************************************************/\n/* Macro createCustomFunctionInID()                                        */\n/* ----------------------------------------------------------------------- */\n/* The macro creates a custom function and dispays the output message.     */\n/* variable categoryId.                                                    */\n/***************************************************************************/\n%macro createCustomFunctionInID();\n    /* ---------------------------------------------------------------------- */\n    /* Set URL to create custom function */\n    data _null_;\n        url= cat('\"', \"&server\", \"/businessRules/functionCategories/&categoryId./functions\", '\"');\n        call symputx('url', url);\n        put url=;\n    run;\n    \n    /* ---------------------------------------------------------------------- */\n    /* Get custom function information */\n    filename HTTPIN \"/tmp/&customFunctionName..json\";\n    filename HTTPOUT TEMP;\n    proc http\n        method= \"POST\"      \n        url= &url\n        in= HTTPIN \n        out= HTTPOUT\n        oauth_bearer= sas_services;\n        headers \n            'Content-Type'='application/json';\n    quit;\n    \n    libname httpout JSON fileref=HTTPOUT;\n\n    %let functionname= .;\n    /* read the functionname */\n    libname httpout JSON fileref=HTTPOUT;\n    proc sql noprint;\n    select trim(value)\n      into :functionname\n      from httpout.alldata\n     where P= 1 \n       and P1 = 'name';\n    quit;\n\n    %if \"&functionname\" = \".\" %then %do;\n        proc sql noprint;\n        create table _GPCF_ERRMSG as\n        select value\n          from httpout.alldata\n         where P= 1 \n           and P1 = 'message';\n        quit;\n\n        data _null_;\n            set WORK._GPCF_ERRMSG;\n            msg= tranwrd(value, '\"', \"'\");\n            file print;\n            error \"ERROR: Could not crerate custom function!\";\n            put msg;\n            put \"Check in Intelligent Decisioning if function is hidden.\";\n            abort;\n        run;\n    %end;\n    %else %do;\n        data _null_;\n            file print;\n            msg= cat(\"Custom function '\", trim(\"&functionname\"), \"' successluffy created in Intelligent Decisioning.\");\n            put msg;\n        run;\n    %end;\n    libname HTTPOUT clear;\n%mend createCustomFunctionInID;\n\n/***************************************************************************/\n/* Macro createCustomFunction()                                            */\n/* ----------------------------------------------------------------------- */\n/* The macro calls all neccessary steps to create the custom function      */\n/* in Intelligent Decisioning.                                             */\n/***************************************************************************/\n%macro createCustomFunction();\n    /* ---------------------------------------------------------------------- */\n    /* Get server information */\n    /* ---------------------------------------------------------------------- */\n    %let server = %sysfunc(getoption(SERVICESBASEURL)); \n  \n    /* ---------------------------------------------------------------------- */\n    /* Set URL to get category information */\n    /* ---------------------------------------------------------------------- */\n    data _null_;\n        url= cat('\"', \"&server\", \"/businessRules/functionCategories?filter=eq(name,'&_categoryName')\", '\"');\n        call symputx('url', url);\n        put url=;\n    run;\n    \n    /* ---------------------------------------------------------------------- */\n    /* Get category information */\n    /* ---------------------------------------------------------------------- */\n    filename HTTPOUT TEMP;\n    proc http\n        method= \"GET\"       \n        url= &url\n        out= HTTPOUT\n        oauth_bearer= sas_services;\n        headers \n            'Content-Type'='application/json';\n    quit;\n    \n    /* ---------------------------------------------------------------------- */\n    /* Get the category id and put it into a macro */\n    /* ---------------------------------------------------------------------- */\n    %getCategoryId();\n    \n    /* ---------------------------------------------------------------------- */\n    /* If there is no category we are going to create it first */\n    /* ---------------------------------------------------------------------- */\n    %if \"&categoryId\" = \".\" %then %do;\n        %createCategory();\n    %end;\n    \n    /* ---------------------------------------------------------------------- */\n    /* Going to create the custom function. */\n    /* ---------------------------------------------------------------------- */\n    %writeCFJson();\n    %createCustomFunctionInID();\n%mend createCustomFunction;\n\n/*************************************************************************************/\n/* Main The Step execution starts here\n/*************************************************************************************/\n/* step to run before we can finally generate the DS2 code */\n%checkFolder()       /* check folders pointing to sasserver */\n/* get the date and time to set it in the DS2 code */\n%getDateTime();\n/* if category is not set we use the default value Category1 */\n%if &_categoryName = %then %do;\n    %let _categoryName= Category1;\n%end;\nfilename pyscript \"&_pythonScript\"; /* set the Python script */\n%prepTemplate();     /* write the code template body */\n%wrapPyCode();       /* wrap the Python code into DS2 code */\n%mergeTemplate();    /* merge the template with the wraped Python code */\n%getCfParameters();  /* get the custom function parameters from as per Python code */\nfilename cfCode \"&_cfCodeOut/&customFunctionName..ds2\"; /* set output file name */\n%setDS2Parameters(); /* prepare macro to set custom function parameters */\n\n/*************************************************************************************/\n/* Read the cose template, replace the token in the template and write the           */\n/* output to a file.                                                                 */\n/*************************************************************************************/\ndata _null_;\n    set WORK._GPCF_CFTEMPLATE;\n    file cfCode; /* output file */\n  \n    length outLine $1000.;\n\n    /* replace template tokens */\n    line= tranwrd(line, '@@customFunctionName@@', \"&customFunctionName\");\n    line= tranwrd(line, '@@version@@', \"&version\");\n    line= tranwrd(line, '@@datetime@@', \"&dt\");\n    line= tranwrd(line, '@@DS2Parameters@@', \"&DS2Parameters\");\n    line= tranwrd(line, '@@pyScriptName@@', \"&customFunctionName\");\n    line= tranwrd(line, '@@pyFunction@@', \"&pythonFunctionName\");\n    line= tranwrd(line, '@@py@@', \"&customFunctionName._py\");\n\n    /* set code for input parameters */\n    if find(line, '@@inputParameters@@') > 0 then do;\n        line= tranwrd(line, '@@inputParameters@@', \"\");\n        %setInPyParameters();\n    end;\n    /* set code for output parameters */\n    if find(line, '@@outputParameters@@') > 0 then do;\n        line= tranwrd(line, '@@outputParameters@@', \"\");\n        %setOutPyParameters();\n    end;\n    /* write code to file */\n    else do;\n        outLine= trim(line);\n        ind= findc(outLine, ' ', 'k');\n        if ind = 0 then put outLine ~ $char1000.;\n        else if ind = 5 then put 4*' 'outLine ~ $char1000.;\n        else if ind = 9 then put 8*' 'outLine ~ $char1000.;\n        else if ind = 13 then put 12*' 'outLine ~ $char1000.;\n        else if ind = 17 then put 16*' 'outLine ~ $char1000.;\n        else put outLine ~ $char1000.;\n    end;\nrun;\n\n/* if swutch is set, we create the custom function in Intelligent Decisioning */\n%if &_createCF = 1 %then %do;\n    %createCustomFunction();\n%end;\n\n/* output message */\ndata _null_;\n    file print; \n    %if \"&_cfCodeOut\" = \"/tmp\" and &_createCF = 0 %then %do;\n        put \"Code generated for custom function: &customFunctionName but no output folder set.\";\n        put \"To see the generated code you need to set the folder for the custom function code file\"\n    %end;\n    %if \"&_cfCodeOut\" ~= \"/tmp\" %then %do;\n        put \"Code generated for custom function: &customFunctionName.\";\n        put \"File: &_cfCodeOut/&customFunctionName..ds2\";\n    %end;\nrun;\n\n/* +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */\n/* CLEAN UP                                                                */\n/* +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */\n/* ----------------------------------------------------------------------- */\n/* clean up macros variables used in this step                             */\n/* ----------------------------------------------------------------------- */\n%symdel DS2Parameters / nowarn;\n%symdel customFunctionName / nowarn;\n%symdel pythonFunctionName / nowarn;\n%symdel inParameters / nowarn;\n%symdel outParameters / nowarn;\n%symdel dt / nowarn;\n\n/* ----------------------------------------------------------------------- */\n/* clean up macros used in this step                                       */\n/* ----------------------------------------------------------------------- */\n%sysmacdelete checkFolder / nowarn;\n%sysmacdelete prepTemplate / nowarn;\n%sysmacdelete wrapPyCode / nowarn;\n%sysmacdelete mergeTemplate / nowarn;\n%sysmacdelete getCfParameters / nowarn;\n%sysmacdelete setDS2Parameters / nowarn;\n%sysmacdelete setInPyParameters / nowarn;\n%sysmacdelete setOutPyParameters / nowarn;\n\n/* --------------------------------------------------------------------------- */\n/* delete temp tables in this step                                             */\n/* --------------------------------------------------------------------------- */\nproc datasets lib=work noprint nowarn;\n    delete _GPCF_ERRMSG\n    _GPCF_CFTEMPLATE\n    _GPCF_WRAPEDPYCODE;\nrun; quit;"}}